from google.genai import types
from google import genai
from dboper import updateuserdb
from pytz import timezone 
from datetime import datetime
from dotenv import load_dotenv
import os

load_dotenv()
def getsummary(jsondict,new_datap,res,data,new_prediction_prob,new_prediction,db):
    api_key = os.getenv('API_KEY')
    if not api_key:
        raise ValueError("API key is missing. Please set the 'GENAI_API_KEY' environment variable.")

    # Set up Gemini client
    client = genai.Client(api_key=api_key)

    model1 = "gemini-2.0-flash-thinking-exp-01-21"
    
    user_prompt = f"""
I want you to generate a human-friendly explanation for a loan application decision using SHAP and LIME outputs. The format should be the same every time, and it should include the following:

🧾 Loan Application Decision: [Approved or Denied]

🔍 Explanation of Decision (Generated by SHAP & LIME)
Provide a short, clear summary of the decision. Highlight how different features influenced the model’s output. Use plain language for accessibility.

Use emojis to indicate the influence of features:

🟥 for strong negative impact

🟨 for moderate or mixed impact

🟩 for strong positive impact

🔍 Feature-Level Explanation:
For each key feature (especially those with high SHAP/LIME values), list:

The feature name

Its actual value

The direction of its contribution (positive or negative)

A one-line explanation of why it affected the decision

📊 Feature Contributions (Top 5):

Feature	Impact (e.g. ±X.XX pts)	Effect (Positive/Negative)
Example	+1.23 pts	Positive
(fill this with actual SHAP or LIME contribution values)		
💡 How to Improve Approval Chances
Give 2–3 actionable tips based on negatively contributing features — e.g., lower loan amount, reduce interest rate, switch loan purpose, improve credit score, etc.

You’ll receive input data with feature names, values, and SHAP/LIME contributions. Generate the explanation dynamically for each example based on this structure
do not inckude any code or technical details in the output.
just provide the explanation in a human-friendly format.
do not include **
** or any other formatting in the output.
do not include this sentence "Explanation of Decision (Generated by SHAP & LIME)"
and fill in the details properly dont leave anything blank 
nothing else.


here's the feature importance : {jsondict}
here's the user's test instance: {new_datap}
here's the result generated: {res}

"""
    contents = [
        types.Content(
            role="user",
            parts=[
                types.Part.from_text(text=user_prompt),
            ],
        ),
    ]
    wholetext = ""
    generate_content_config = types.GenerateContentConfig(
        response_mime_type="text/plain",
    )
    for chunk in client.models.generate_content_stream(
        model=model1,
        contents=contents,
        config=generate_content_config,
    ):
        wholetext+=chunk.text
        
    markers = [
        "🔍 Feature-Level Explanation:",
        "📊 Feature Contributions (Top 5):",
        "💡 How to Improve Approval Chances"
    ]
    
    # Initialize result dict
    parts = {
        'result': "Loan Approved" if new_prediction == 1 else "Loan Denied",
        "justification": "",
        "feature_explanation": "",
        "feature_contributions": "",
        "suggestions": "",
        "probability": new_prediction_prob
    }

    # Split the text using markers
    split1 = wholetext.split(markers[0], 1)
    parts["justification"] = split1[0].strip()

    if len(split1) > 1:
        split2 = split1[1].split(markers[1], 1)
        parts["feature_explanation"] = split2[0].strip()

        if len(split2) > 1:
            split3 = split2[1].split(markers[2], 1)
            parts["feature_contributions"] = split3[0].strip()

            if len(split3) > 1:
                parts["suggestions"] = split3[1].strip()
    
    if new_prediction_prob <= 0.5:
        risk_str = "HIGH"
    elif new_prediction_prob >= 0.8:
        risk_str = "LOW"
    else:
        risk_str = "MEDIUM"
    
    ts = datetime.now(timezone("Asia/Kolkata")).strftime('%d-%m-%Y %H:%M:%S')
    userid = data["email"]+" "+ts
    print(userid)
    
    dict1 = {"name":data["name"], "credit_score":data["credit"], "_id":userid, "Risk":risk_str, "Status":"Loan Approved" if new_prediction == 1 else "Loan Denied",
    "justification":parts["justification"],"feature_explanation":parts["feature_explanation"],"feature_contributions":parts["feature_contributions"],
    "suggestions":parts["suggestions"]
    }
    updateuserdb(dict1,db)
    return parts